/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   draw_xpm.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: gsever <gsever@student.42kocaeli.com.tr    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/14 18:48:49 by gsever            #+#    #+#             */
/*   Updated: 2023/01/24 21:51:57 by gsever           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

void	draw_xpm_to_sprite(t_main *main, int location, t_xpm xpm) // sütun bilgisi var lakin genişlik bilgisi yok.
{
	// int i = -1;
	// static int l = 0;
	// int find_pixel = ((main->sprite.s_y - floor(main->sprite.s_y)) * (xpm.width)); // resmin hangi sütununu çizeceğini belirtiyor.
	// int img_loc = (xpm.width * (xpm.height / 2)) + find_pixel - l;
	// l++;
	// if (l > xpm.width)
	// 	l = 0;
	// // int oran = (int)((double)((xpm.height / 2) * BOX_SIZE) / main->sprite.distance); // resmin sürekli bize bakması için dist sprite boyunca aynı değere sahip olmalı.
	// int	oran = (((double)WINDOW_H / 2.0) / main->sprite.distance) * (double)BOX_SIZE;// ekrandaki yuksekligimiz.
	// while (++i < oran)
	// {
	// 	if ((location - (WINDOW_W * i)) >= 0) //yukarı
	// 		main->screen.addr[(location - (WINDOW_W * i))] = xpm.img.addr[img_loc - xpm.width * (int)((double)i * ((double)xpm.width / (double)(oran * 2)))];
	// 	if ((WINDOW_H * WINDOW_W) >= (location + (WINDOW_W * i))) // aşağı
	// 		main->screen.addr[(location + (WINDOW_W * i))] = xpm.img.addr[img_loc - xpm.width * (int)((double)i * ((double)xpm.width / (double)(oran * 2)))];
	// }

		main->sprite.distance = main->sprite.distance * (double)BOX_SIZE * ((double)WINDOW_H / (double)WINDOW_W);// burada normal uzakligina ulasiyor main->sprite.distance.
	// printf("cizerken sprite.distance -> %f\n", main->sprite.distance);
	// int	location = (WINDOW_W * main->key.screen_mid) - ray_count;// screen'ki yatay sekildeki konumumuz. ----------[-]
	// int	oran = (((double)WINDOW_H / 2.0) / main->sprite.distance) * (double)BOX_SIZE;// ekrandaki yuksekligimiz.
	int	oran = (((double)WINDOW_H / 2.0) / main->sprite.distance) * (double)BOX_SIZE;// ekrandaki yuksekligimiz.
	// int oran = (int)((double)((WINDOW_H / 2) * BOX_SIZE) / main->sprite.distance);
	if (oran > 4000)
		oran = 4000;
	// int	find_pixel = ((main->ray.pos_x - floor(main->ray.pos_x)) * xpm.width); // resimdeki pixel sütun konumunu bulur.
	int	find_pixel = ((main->sprite.s_x - floor(main->sprite.s_x)) * xpm.width); // resimdeki pixel sütun konumunu bulur.
	int	img_loc = (xpm.width * (xpm.height / 2)) + find_pixel;// buraya kadar da img'deki konumu bulduk.
	int i = -1;
	while (++i < oran)
	{
		if ((location - (WINDOW_W * i)) >= 0) //yukarı
			main->screen.addr[(location - (WINDOW_W * i))] = xpm.img.addr[img_loc - xpm.width * (int)((double)i * ((double)xpm.width / (double)(oran * 2)))];
			// main->screen.addr[(location - (WINDOW_W * i))] = xpm.img.addr[(location - (WINDOW_W * i))];
		if ((WINDOW_H * WINDOW_W) >= (location + (WINDOW_W * i))) // aşağı
			main->screen.addr[(location + (WINDOW_W * i))] = xpm.img.addr[img_loc + xpm.width * (int)((double)i * ((double)xpm.width / (double)(oran * 2)))];
			// main->screen.addr[(location + (WINDOW_W * i))] = xpm.img.addr[(location - (WINDOW_W * i))];
	}
}

/**
 * @brief 
 * 
 * Gerekli argler:
 * 	 Hangi duvara carptiginin bilinmesi gerekiyor;
 * 		dir_x, dir_y, hit_v, hit_h, hit_x, hit_y
 * bpp: 32, line_size: 256, endian: 0
 * @param main 
 * @param location 
 * @param color 
 */
void	draw_xpm_to_wall(t_main *main, int location, int oran, t_xpm xpm)
{
	int	i = -1;
	int find_pixel = 0;
	if (main->ray.hit_h == true)
		find_pixel = ((main->ray.pos_x - floor(main->ray.pos_x)) * xpm.width); // resimdeki pixel sütun konumunu bulur.
	else if (main->ray.hit_v == true)
		find_pixel = ((main->ray.pos_y - floor(main->ray.pos_y)) * xpm.width); // resimdeki pixel sütun konumunu bulur.
	int img_loc = (xpm.width * (xpm.height / 2)) + find_pixel;
	while (++i < oran)
	{
		if ((location - (WINDOW_W * i)) >= 0) //yukarı
			main->screen.addr[(location - (WINDOW_W * i))] = xpm.img.addr[img_loc - xpm.width * (int)((double)i * ((double)xpm.width / (double)(oran * 2)))];//xpm.img.addr[img_loc - (xpm.width * ((i / (WINDOW_H / main->xpm[0].height)) % xpm.height))];
		if ((WINDOW_H * WINDOW_W) >= (location + (WINDOW_W * i))) // aşağı
			main->screen.addr[(location + (WINDOW_W * i))] = xpm.img.addr[img_loc + xpm.width * (int)((double)i * ((double)xpm.width / (double)(oran * 2)))];//xpm.img.addr[img_loc + (xpm.width * ((i / (WINDOW_H / main->xpm[0].height)) % xpm.height))];
	}
}












/////////////////////////////////////////////////////

// void	draw_xpm_to_sprite(t_main *main, int location, t_xpm xpm) // sütun bilgisi var lakin genişlik bilgisi yok.
// {
// 	int i = -1;
// 	int find_pixel = (main->sprite.s_x - floor(main->sprite.s_x)) * (xpm.width); // resmin hangi sütununu çizeceğini belirtiyor.
// 	int img_loc = (xpm.width * (xpm.height / 2)) + find_pixel;
// 	int oran = (int)((double)((xpm.height / 2) * BOX_SIZE) / main->sprite.distance); // resmin sürekli bize bakması için dist sprite boyunca aynı değere sahip olmalı.
// 	while (++i < oran)
// 	{
// 		if ((location - (WINDOW_W * i)) >= 0) //yukarı
// 			main->screen.addr[(location - (WINDOW_W * i))] = xpm.img.addr[img_loc - xpm.width * (int)((double)i * ((double)xpm.width / (double)(oran * 2)))];
// 		if ((WINDOW_H * WINDOW_W) >= (location + (WINDOW_W * i))) // aşağı
// 			main->screen.addr[(location + (WINDOW_W * i))] = xpm.img.addr[img_loc + xpm.width * (int)((double)i * ((double)xpm.width / (double)(oran * 2)))];
// 	}
// }



////////////////////////////


// void	draw_xpm_to_sprite(t_main *main, int location, int oran, t_xpm xpm) // sütun bilgisi var lakin genişlik bilgisi yok.
// {
// 	int i = -1;
// 	static int l = 0;
// 	int find_pixel = ((main->sprite.s_y - floor(main->sprite.s_y)) * (xpm.width)); // resmin hangi sütununu çizeceğini belirtiyor.
// 	int img_loc = (xpm.width * (xpm.height / 2)) + find_pixel - l;
// 	l++;
// 	if (l > xpm.width)
// 		l = 0;
// 	oran = (int)((double)((xpm.height / 2) * BOX_SIZE) / main->sprite.distance); // resmin sürekli bize bakması için dist sprite boyunca aynı değere sahip olmalı.
// 	while (++i < oran / 2)
// 	{
// 		if ((location - (WINDOW_W * i)) >= 0) //yukarı
// 			main->screen.addr[(location - (WINDOW_W * i))] = xpm.img.addr[img_loc - xpm.width * (int)((double)i * ((double)xpm.width / (double)(oran * 2)))];
// 		if ((WINDOW_H * WINDOW_W) >= (location + (WINDOW_W * i))) // aşağı
// 			main->screen.addr[(location + (WINDOW_W * i))] = xpm.img.addr[img_loc - xpm.width * (int)((double)i * ((double)xpm.width / (double)(oran * 2)))];
// 	}
// }

// void	draw_xpm_to_sprite(t_main *main, int location, int oran, t_xpm xpm)
// {
// 	(void)main;
// 	(void)xpm;
// 	(void)oran;
// 	int i = -1;

// 	int find_pixel = 0;
// 	if (main->ray.hit_h == true)
// 		find_pixel = ((main->ray.pos_x - floor(main->ray.pos_x)) * xpm.width); // resimdeki pixel sütun konumunu bulur.
// 	else if (main->ray.hit_v == true)
// 		find_pixel = ((main->ray.pos_y - floor(main->ray.pos_y)) * xpm.width); // resimdeki pixel sütun konumunu bulur.
// 	int img_loc = (xpm.width * (xpm.height / 2)) + find_pixel;
// 	while (++i < oran)
// 	{
// 		if ((location - (WINDOW_W * i)) >= 0) //yukarı
// 			main->screen.addr[(location - (WINDOW_W * i))] = xpm.img.addr[img_loc - xpm.width * (int)((double)i * ((double)xpm.width / (double)(oran * 2)))];
// 			// main->screen.addr[(location - (WINDOW_W * i))] = xpm.img.addr[(location - (WINDOW_W * i))];
// 		// if ((WINDOW_H * WINDOW_W) >= (location + (WINDOW_W * i))) // aşağı
// 			// main->screen.addr[(location + (WINDOW_W * i))] = xpm.img.addr[img_loc - xpm.width * (int)((double)i * ((double)xpm.width / (double)(oran * 2)))];
// 			// main->screen.addr[(location + (WINDOW_W * i))] = xpm.img.addr[(location - (WINDOW_W * i))];
// 	}
// }